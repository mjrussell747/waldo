<?php

class CustomerController extends \BaseController {

	/**
	 * Display a listing of the resource.
	 *
	 * @return Response
	 */
	public function index()
	{
		//get employees
		$employees = DB::table('employees')->lists('last_name','id');
		//get all the customers
                $customers = Customer::paginate(15);;
                // load the view and pass the customers
                return View::make('customers.index')
                	->with('customers', $customers)
                	->with('employees', $employees);
	}

	/**
	 * Show the form for creating a new resource.
	 *
	 * @return Response
	 */
	public function create()
	{
		//get employees
		$employees = DB::table('employees')->orderBy('last_name', 'asc')->lists('last_name','id');
		// load the create form (app/views/customers/create.blade.php)
                return View::make('customers.create')
                	->with('employees', $employees);
	}

	/**
	 * Store a newly created resource in storage.
	 *
	 * @return Response
	 */
	public function store()
	{
		// validate
                $rules = array(
                        'company'       => 'required',
                        'last_name'      => 'required',
			'first_name'	=> 'required',
			'phone'		=> 'required',
			'address_1'	=> 'required',
			'city'		=> 'required',
			'state'		=> 'required',
			'postal_code'	=> 'required',
			'country'	=> 'required',
			'employee_id'	=> 'required'
                );
                $validator = Validator::make(Input::all(), $rules);

                // process the add
                if ($validator->fails()) {
                        return Redirect::to('customers/create')
                                ->withErrors($validator)
                                ->withInput(Input::except('password'));
                } else {
                        // store
                        $customer = new Customer;
                        $customer->company       = Input::get('company');
                        $customer->last_name    = Input::get('last_name');
			$customer->first_name    = Input::get('last_name');
			$customer->phone    = Input::get('phone');
			$customer->address_1    = Input::get('address_1');
			$customer->address_2    = Input::get('address_2');
			$customer->city    = Input::get('city');
			$customer->state    = Input::get('state');
			$customer->postal_code    = Input::get('postal_code');
			$customer->country    = Input::get('country');
			$customer->employee_id    = Input::get('employee_id');
			$customer->credit_limit    = Input::get('credit_limit');

                        $customer->save();

                        // redirect
                        Session::flash('message', 'Successfully created customer!');
                        return Redirect::to('customers');
		}
	}

	/**
	 * Display the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function show($id)
	{
		// get the customer
		$customer = Customer::find($id);
                $orders = Customer::find($id)->orders;

		// show the view and pass the category to it
		return View::make('customers.show')
			->with('customer', $customer)
                        ->with('orders', $orders);
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
		$employees = DB::table('employees')->orderBy('last_name', 'asc')->lists('last_name','id');
		// get the customer
		$customer = Customer::find($id);
		// show the edit form and pass the customer
		return View::make('customers.edit')
			->with('customer', $customer)
			->with('employees', $employees);;
	}

	/**
	 * Update the specified resource in storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function update($id)
	{
		// validate
		$rules = array(
                        'company'       => 'required',
                        'last_name'      => 'required',
			'first_name'	=> 'required',
			'phone'		=> 'required',
			'address_1'	=> 'required',
			'city'		=> 'required',
			'state'		=> 'required',
			'postal_code'	=> 'required',
			'country'	=> 'required',
			'employee_id'	=> 'required'
		);
		$validator = Validator::make(Input::all(), $rules);

		// process the login
		if ($validator->fails()) {
			return Redirect::to('customers/create')
				->withErrors($validator)
				->withInput(Input::except('password'));
		} else {
			// store
                        $customer = new Customer;
                        $customer->company      = Input::get('company');
                        $customer->last_name    = Input::get('last_name');
			$customer->first_name    = Input::get('last_name');
			$customer->phone    = Input::get('phone');
			$customer->address_1    = Input::get('address_1');
			$customer->address_2    = Input::get('address_2');
			$customer->city    = Input::get('city');
			$customer->state    = Input::get('state');
			$customer->postal_code    = Input::get('postal_code');
			$customer->country    = Input::get('country');
			$customer->employee_id    = Input::get('employee_id');
			$customer->credit_limit    = Input::get('credit_limit');
                        $customer->save();

			// redirect
			Session::flash('message', 'Successfully created customer!');
			return Redirect::to('customers');
		}
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($id)
	{
		// delete
		$customer = Customer::find($id);
		$customer->delete();

		// redirect
		Session::flash('message', 'Successfully deleted the customer!');
		return Redirect::to('customers');
	}

}
